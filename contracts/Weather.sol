// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "IStardust.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

//implement Chainlink automation

contract Weather is Ownable {
    
    uint public immutable interval;
    uint public lastTimeStamp;
    address controller;

    //Each chain has different base prices
    int constant FOOD_PRICE = 5;
    int constant MEDICINE_PRICE = 10;
    int constant METAL_PRICE = 20;
    int constant TECH_PRICE = 100;
    int constant ANTIMATTER_PRICE = 1000;

    function setControl(address _control) public onlyOwner {
        controller = _control;
    }

    function checkUpkeep(
        bytes calldata /* checkData */
    )
        external
        view
        returns (
            bool upkeepNeeded,
            bytes memory /* performData */
        )
    {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(
        bytes calldata /* performData */
    ) external {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval) {
            lastTimeStamp = block.timestamp;
            setPrices();
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }

    //add variance

    function setPrices() internal {
        uint[5] prices;
        prices[0] = FOOD_PRICE;
        prices[1] = MEDICINE_PRICE;
        prices[2] = METAL_PRICE;
        prices[3] = TECH_PRICE;
        prices[4] = ANTIMATTER_PRICE;
        IStardust(controller).setPrices(prices);
    }

}
